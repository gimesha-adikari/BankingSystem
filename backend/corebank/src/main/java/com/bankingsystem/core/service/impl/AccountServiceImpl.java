package com.bankingsystem.core.service.impl;

import com.bankingsystem.core.dto.AccountRequestDTO;
import com.bankingsystem.core.dto.AccountResponseDTO;
import com.bankingsystem.core.entity.Account;
import com.bankingsystem.core.entity.Branch;
import com.bankingsystem.core.entity.Customer;
import com.bankingsystem.core.exceptions.ResourceNotFoundException;
import com.bankingsystem.core.repository.AccountRepository;
import com.bankingsystem.core.repository.BranchRepository;
import com.bankingsystem.core.repository.CustomerRepository;
import com.bankingsystem.core.repository.UserRepository;
import com.bankingsystem.core.service.AccountService;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;

import java.security.SecureRandom;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class AccountServiceImpl implements AccountService {

    private final AccountRepository accountRepository;
    private final UserRepository userRepository;
    private final CustomerRepository customerRepository;
    private final BranchRepository branchRepository;

    private static final SecureRandom random = new SecureRandom();
    private static final int ACCOUNT_NUMBER_LENGTH = 10;

    @Override
    public List<AccountResponseDTO> getAllAccounts() {
        List<Account> accounts = accountRepository.findAll();
        return accounts.stream()
                .map(this::mapToDTO)
                .collect(Collectors.toList());
    }

    @Override
    public AccountResponseDTO getAccountById(UUID accountId) {
        Account account = accountRepository.findById(accountId)
                .orElseThrow(() -> new ResourceNotFoundException("Account not found"));
        return mapToDTO(account);
    }

    @Override
    public List<AccountResponseDTO> getAccountsByCustomerId(UUID customerId) {
        List<Account> accounts = accountRepository.findByCustomerCustomerId(customerId);
        return accounts.stream()
                .map(this::mapToDTO)
                .collect(Collectors.toList());
    }

    @Override
    public AccountResponseDTO openAccount(AccountRequestDTO request,UUID customerId) {
        UUID userId = getCurrentUserId();
        if( userRepository.findById(userId).get().getRole().getRoleName().equalsIgnoreCase("TELLER") ){
            if ( customerId != null ){
                userId = customerId;
            }else {
                throw new RuntimeException("Customer Id is required for Teller");
            }
        }
        Customer customer = customerRepository.findByUserUserId(userId)
                .orElseThrow(() -> new ResourceNotFoundException("Customer not found"));
        Branch branch = branchRepository.findById(request.getBranchId())
                .orElseThrow(() -> new ResourceNotFoundException("Branch not found"));

        Account account = new Account();
        // No need to set accountId manually now, generated by Hibernate
        account.setAccountNumber(generateUniqueAccountNumber());
        account.setAccountType(request.getAccountType());
        account.setAccountStatus(Account.AccountStatus.ACTIVE);
        account.setBalance(request.getInitialDeposit());
        account.setCustomer(customer);
        account.setBranch(branch);
        account.setCreatedAt(LocalDateTime.now());
        account.setUpdatedAt(LocalDateTime.now());

        account = accountRepository.save(account);
        return mapToDTO(account);
    }

    @Override
    public AccountResponseDTO updateAccount(UUID accountId, AccountRequestDTO updatedAccountDTO) {
        Account existing = accountRepository.findById(accountId)
                .orElseThrow(() -> new ResourceNotFoundException("Account not found"));

        existing.setAccountType(updatedAccountDTO.getAccountType());

        Branch branch = branchRepository.findById(updatedAccountDTO.getBranchId())
                .orElseThrow(() -> new ResourceNotFoundException("Branch not found"));
        existing.setBranch(branch);

        existing.setUpdatedAt(LocalDateTime.now());
        Account saved = accountRepository.save(existing);
        return mapToDTO(saved);
    }

    @Override
    public void closeAccount(UUID accountId) {
        Account account = accountRepository.findById(accountId)
                .orElseThrow(() -> new ResourceNotFoundException("Account not found"));
        account.setAccountStatus(Account.AccountStatus.CLOSED);
        account.setUpdatedAt(LocalDateTime.now());
        accountRepository.save(account);
    }

    @Override
    public AccountResponseDTO changeAccountStatus(UUID accountId, Account.AccountStatus status) {
        Account account = accountRepository.findById(accountId)
                .orElseThrow(() -> new ResourceNotFoundException("Account not found"));
        account.setAccountStatus(status);
        account.setUpdatedAt(LocalDateTime.now());
        Account saved = accountRepository.save(account);
        return mapToDTO(saved);
    }

    @Override
    public List<AccountResponseDTO> getAccountsForCurrentUser() {
        UUID userId = getCurrentUserId();

        // Corrected: find customer entity first by userId, then find accounts by customerId
        Customer customer = customerRepository.findByUserUserId(userId)
                .orElseThrow(() -> new ResourceNotFoundException("Customer not found"));

        List<Account> accounts = accountRepository.findByCustomerCustomerId(customer.getCustomerId());

        return accounts.stream()
                .map(this::mapToDTO)
                .collect(Collectors.toList());
    }

    // Helper methods

    private UUID getCurrentUserId() {
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        String username = auth.getName();

        return userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("User not found"))
                .getUserId();
    }

    private AccountResponseDTO mapToDTO(Account account) {
        AccountResponseDTO dto = new AccountResponseDTO();
        dto.setAccountId(account.getAccountId());
        dto.setAccountNumber(account.getAccountNumber());
        dto.setAccountType(account.getAccountType());
        dto.setAccountStatus(account.getAccountStatus());
        dto.setBalance(account.getBalance());
        dto.setCreatedAt(account.getCreatedAt());
        dto.setUpdatedAt(account.getUpdatedAt());
        return dto;
    }

    private String generateUniqueAccountNumber() {
        String accountNumber;
        do {
            accountNumber = generateRandomDigits(ACCOUNT_NUMBER_LENGTH);
        } while (accountRepository.existsByAccountNumber(accountNumber));
        return accountNumber;
    }

    private String generateRandomDigits(int length) {
        StringBuilder sb = new StringBuilder(length);
        for (int i = 0; i < length; i++) {
            sb.append(random.nextInt(10));
        }
        return sb.toString();
    }
}
